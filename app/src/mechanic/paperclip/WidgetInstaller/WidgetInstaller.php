<?php namespace PaperClip\WidgetInstaller;

/*
|--------------------------------------------------------------------------
| Widget Installer
|--------------------------------------------------------------------------
| This class is responsible of the installation and deinstallation process 
| of widgets.
*/

class WidgetInstaller
{
	/**
	 * Holds the validator instance
	 * @var Illuminate\Validation\Validator
	 */
	protected $userSettingsValidator = null;

	/**
	 * Holds the errors generated by the installer.
	 * @var Illuminate\Support\MessageBag
	 */
	protected $installerErrors = null;

	/**
	 * Holds the settings of the widget being installed.
	 * @var array
	 */
	protected $widgetSettings = array();
	/**
	 * Initialize installer
	 */
	public function __construct()
	{
		$this->installerErrors = new \MessageBag;
	}

	/**
	 * Installs the widget
	 * @param  array $settings
	 * @return Illuminate\Support\MessageBag | null
	 */
	public function install($settings)
	{
		$this->widgetSettings =  $settings;

		if($this->isValidUserSettings($settings) === false
			|| $this->isValidStrictName($settings['strictName']) === false) 
		{
			return $this->getAllErrors();
		}
		$widget = \Widget::create($settings);	
	}

	/**
	 * Validate settings
	 * @param  array $settings
	 * @return boolean
	 */
	protected function isValidUserSettings()
	{
		$this->userSettingsValidator = \Validator::make($this->widgetSettings, array(
			'title'				=> \Government::regulation('widget.title'),
			'strictName'		=> \Government::regulation('widget.strictName'),
			'userSettings'		=> \Government::regulation('widget.userSettings'),
			'description'		=> \Government::regulation('widget.description'),
			'bodyTemplateName'	=> \Government::regulation('widget.bodyTemplateName'),
			'user_id'			=> \Government::regulation('widget.user_id'),
			'previousVersion'	=> \Government::regulation('widget.previousVersion'),
			'currentVersion'	=> \Government::regulation('widget.currentVersion'),
			));
		// Validate will return the validator instance
		// if the validation didn't pass.
		if($this->userSettingsValidator->fails()) return false;
		return true;
	}

	/**
	 * Get a localized expression
	 * @param string $error
	 * @param array $replacements
	 * @return string
	 */
	protected function installerLocalizedExpression($error, $replacements)
	{
		return \Lang::get('widgetInstaller/expressions.item-exists-in', $replacements);
	}

	/**
	 * Get a localized item name
	 * @param  string $item
	 * @return string
	 */
	protected function installerLocalizedItem($item)
	{
		return \Lang::get("widgetInstaller/items.{$item}");
	}

	/**
	 * Add an install error
	 * @param 	string $arrayKey
	 * @param 	string $error
	 * @return  void
	 */
	protected function addInstallerError($arrayKey, $error)
	{
		$msgBag = $this->installerErrors;
		$msgBag::add($arrayKey, $error);
	}

	/**
	 * Merges all errors together
	 * @return Illuminate\Support\MessageBag
	 */
	protected function getAllErrors()
	{
		if(!$this->userSettingsValidator->messages() instanceOf \Illuminate\Support\Contracts\MessageProviderInterface 
			|| !$this->installerErrors instanceOf \PaperClip\Support\Facades\MessageBag)
		{
			// This error could mean that before you can use this function you first have to
			// use $this->isValidUserSettings
			throw new \Exception('userSettingsValidator or installerErrors is not of MessageBag type');
		}

		$installerErrors = $this->installerErrors;
		$userSettings = $this->userSettingsValidator->messages();
		$errors = $installerErrors::merge($userSettings);
		return $errors;
	}

	/**
	 * Checks if the strict_name attribute already exists in the database
	 * @param  array $settings
	 * @return boolean
	 */
	protected function isValidStrictName($strictName)
	{
		$result = \Widget::where('strictName', '=', $strictName)->first();
		if($result !== null) 
		{
			$this->addInstallerError('strictName-exists', "Widget Installer Error ({$this->widgetSettings['title']}): " . 
				$this->installerLocalizedExpression('item-already-exists-in', array(
					'item' 	=> 'strictName',
					'place' => $this->installerLocalizedItem('database'),
					)));
			return false;
		}
		return true;
	}

	/**
	 * Uninstalls the widget
	 * @param  string $strictName
	 * @return boolean
	 */
	public function uninstall($strictName)
	{
		$widget = \Widget::where('strictName', '=', $strictName)->first();
		if(is_null($widget)) return false;
		$widget->forceDelete();
		return true;
	}
}